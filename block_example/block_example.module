<?php
/**
 * @file
 * Module file for block_example.
 */

/**
 * @defgroup block_example Example: Block
 * @ingroup examples
 * @{
 * Demonstrates code creation of blocks.
 *
 * This is an example outlining how a module can define blocks that can be
 * displayed on various pages of a site, or how to alter blocks provided by
 * other modules.
 */

/**
 * Implements hook_config_info().
 *
 * Let's Backdrop know about Block Example's configuration.
 */
function block_example_config_info() {
  $prefixes['block_example.settings'] = array(
    'label' => 'Block Example settings',
    'group' => t('Example'),
  );
  return $prefixes;
}

/**
 * Implements hook_menu().
 *
 * Provides a default page to explain what this module does.
 */
function block_example_menu() {
  $items['examples/block_example'] = array(
    'page callback' => 'block_example_page',
    'access callback' => TRUE,
    'title' => 'Block Example',
  );
  return $items;
}

/**
 * Simple page function to explain what the block example is about.
 */
function block_example_page() {
  $page = array(
    '#type' => 'markup',
    '#markup' => t('The Block Example provides three sample blocks which demonstrate the various block APIs. To experiment with the blocks, enable and configure them on <a href="@url">the layout admin page</a>.', array('@url' => url('/admin/structure/layouts/'))),
  );
  return $page;
}
/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function block_example_block_info() {
  // This hook returns an array, each component of which is an array of block
  // information. The array keys are the 'delta' values used in other block
  // hooks.
  //
  // The required block information is a block description, which is shown
  // to the site administrator in the list of possible blocks. You can also
  // provide initial settings for block weight, status, etc.

  // This sample shows an empty block. This block will be available in the 
  // Layout builder, but will not be displayed on page view because it is empty.
  $blocks['example_empty'] = array(
    'info' => t('Example: empty block'),
    'description' => 'This is an empty block.',
  );

  // This sample demonstrates a block which accepts settings. It will present a
  // textfield in the Layout builder settings popup for you to enter some text 
  // which will be displayed as the content of the block.
  $blocks['example_configurable_text'] = array(
    // info: The name of the block.
    'info' => t('Example: configurable text string'),
    'description' => 'This is block is configurable.',
  );

  // This sample shows how to require contexts in creating a block. This block
  // will be visible only on 'node/*' pages and will not be listed in the block 
  // in Layout builder if this context is not available in the URL.
  $blocks['example_context'] = array(
    'info' => t('Example: requires context'),
    'description' => 'This is an empty block.',
    // A context of type "node" (the value here) will be given the key "the_node"
    // (specified as the key here) in hook_block_view() in the $context
    // parameter.
    'required contexts' => array(
      'the_node' => 'node',
    ),
  );

  // This sample block is to demonstrate the the ability to modify a block after
  // it has been defined by a module. It will have its title altered by 
  // block_example_block_view_alter().
  $blocks['example_uppercase'] = array(
    'info' => t('Example: uppercase this please'),
    'description' => 'This block\'s title will be uppercase.',
  );

  // This block will be generated without using the usual Block module hooks; it
  // is being defined by a custom class.  
  $blocks['example_custom_class'] = array(
    'info' => t('Example: uses custom class'),
    'description' => 'This block uses a custom class.',
    // Our custom class declared here is defined in block_example.inc.
    'class' => 'BlockExampleCustomClass',
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 * This hook declares configuration options for blocks provided by this module.
 */
function block_example_block_configure($delta = '', $settings = array()) {
  $form = array();
  // The $delta parameter tells us which block is being configured.
  // In this example, we'll allow the administrator to customize
  // the text of the 'configurable text string' block defined in this module.
  if ($delta == 'example_configurable_text') {
    // All we need to provide is the specific configuration options for our
    // block. Backdrop will take care of the standard block configuration options
    // (block title, page visibility, etc.) and the save button.
    $form['block_example_string'] = array(
      '#type' => 'textfield',
      '#title' => t('Block contents'),
      '#size' => 60,
      '#description' => t('This text will appear in the example block.'),
      '#default_value' => config_get('block_example.settings', 'block_example_string'),
      
      // The '#default_value could also be retrieved from Layout settings if 
      // the value is not unset in hook_block_save(). See hook_block_save() for
      // explanation. The commented line below shows how this would be retrieved
      // if it had been saved in Layout settings.
      // '#default_value' => $settings['block_example_string'],
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 *
 * This hook declares how the configured options for a block
 * provided by this module are saved.
 */
function block_example_block_save($delta = '', $edit = array()) {
  // We need to save settings from the configuration form.
  // We need to check $delta to make sure we are saving the right block.
  if ($delta == 'example_configurable_text') {
    
    // Have Backdrop save the string to the block_example config.
    config_set('block_example.settings', 'block_example_string', $edit['block_example_string']);
    
    // The value of $edit['block_example_string'] would also be saved to Layout 
    // settings in the layout.layout.<layout_name>.json file as configuration 
    // if the following line is commented out.
    // Unsetting it here tells Layout that we don't want Layout to save this for
    // us (because block_example has its own config file).
    unset($edit['block_example_string']);
  }
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function block_example_block_view($delta = '', $settings = array(), $contexts = array()) {
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'example_configurable_text':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Backdrop UI supercedes this one.
      $block['subject'] = t('Title of first block (example_configurable_text)');
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = block_example_contents($delta);
      break;

    case 'example_context':
      $block['subject'] = t('Title of the context block (example_context)');
      // The 'node' is available in $contexts. See block_example_block_info().
      $block['content'] = block_example_contents($delta, $contexts['the_node']->title);
      break;

    case 'example_empty':
      $block['subject'] = t('Title of second block (example_empty)');
      $block['content'] = block_example_contents($delta);
      break;

    case 'example_uppercase':
      $block['subject'] = t("uppercase this please");
      $block['content'] = t("This block's title will be changed to uppercase. Any other block with 'uppercase' in the subject or title will also be altered. If you change this block's title through the UI to omit the word 'uppercase', it will still be altered to uppercase as the subject key has not been changed.");
      break;
  }
  return $block;
}

/**
 * A module-defined block content function.
 *
 * Note that $node_title is only applicable to the context block and is ignored
 * for the other blocks.
 */
function block_example_contents($which_block, $node_title = NULL) {
  switch ($which_block) {
    case 'example_configurable_text':
      // Modules would typically perform some database queries to fetch the
      // content for their blocks. Here, we'll just use the config set in the
      // block configuration or, if none has set, a default value.
      // Block content can be returned in two formats: renderable arrays
      // (as here) are preferred though a simple string will work as well.
      // Block content created through the UI defaults to a string.
      $result = array(
        '#markup' => config_get('block_example.settings', 'block_example_string'),
      );
      return $result;

    case 'example_context':
      // We can now display the node title as the block content. This should be
      // available as 'node' is a required context for this block.
      $result = array(
        '#markup' => check_plain($node_title),
      );
      return $result;

    case 'example_empty':
      // It is possible that a block not have any content, since it is
      // probably dynamically constructed. In this case, Backdrop will not display
      // the block at all. This block will not be displayed.
      return;
  }
}


/**
 * Implements hook_block_view_alter().
 *
 * This hook allows you to modify the output of any block in the system.
 *
 * In addition, instead of hook_block_view_alter(), which is called for all
 * blocks, you can also use hook_block_view_MODULE_DELTA_alter() to alter a
 * specific block. To change only our block using
 * hook_block_view_MODULE_DELTA_alter, we would use the function:
 * block_example_block_view_block_example_example_configurable_text_alter()
 *
 * We are going to uppercase the subject (the title of the block as shown to the
 * user) of any block if the string "uppercase" appears in the block title or
 * subject. Default block titles are set programmatically in the subject key;
 * titles created through the UI are saved in the title key. This module creates
 * an example block to demonstrate this effect (default title set
 * programmatically as subject).  You can also demonstrate the effect of this
 * hook by creating a new block whose title has the string 'uppercase' in it
 * (set as title through the UI).
 */
function block_example_block_view_alter(&$data, $block) {
  // We'll search for the string 'uppercase'.
  if ((!empty($block->title) && stristr($block->title, 'uppercase')) || (!empty($data['subject']) && stristr($data['subject'], 'uppercase'))) {
    // This will uppercase the default title.
    $data['subject'] = isset($data['subject']) ? backdrop_strtoupper($data['subject']) : '';
    // This will uppercase a title set in the UI.
    $block->title = isset($block->title) ? backdrop_strtoupper($block->title) : '';
  }
}

/**
 * Implements hook_autoload_info().
 *
 * Required to load our custom class.
 */
function block_example_autoload_info() {
  return array(
    'BlockExampleCustomClass' => 'block_example.inc',
  );
}

/**
 * @} End of "defgroup block_example".
 */
